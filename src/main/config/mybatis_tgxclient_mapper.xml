<?xml version="1.0" encoding="UTF-8" ?>
<!--  
  -
  Copyright (c) 2013 Zhang Zhuo 
  All rights reserved.
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.
  3. The name of the author may not be used to endorse or promote
  products derived from this software without specific written permission.
  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  SUCH DAMAGE.
  
-->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tgx.queen.db.TgxClientMapper">
	<insert id="createClientSchema">
		<![CDATA[
		create schema if not exists ${schema_cm};
		]]>
	</insert>
	<insert id="createClientHashTable">
		<![CDATA[
		create table if not exists
			${schema_cm}.${tName_cm_hash_global}
		(
			id	 		bigint unique,
			hash 		char(64) primary key
		);
		]]>
	</insert>
	<insert id="dropClientSchema">
		<![CDATA[
		drop table if exists ${schema_cm} cascade;
		]]>
	</insert>
	<insert id="createClientTable">
		<![CDATA[
		create table if not exists
			${schema_cm}.${tName_cm_master}
		(
			id 				bigserial primary key,
			client_id 		char(64) not null,
			c_time 			timestamp default now(),
			tags			int[] default '{-1}',			
			client_type 	text,
			thirdparty_push_token char(128)
		);
		]]>
	</insert>
	<insert id="createClientSubShardTable" parameterType="TgxSharder">
		<bind name="shard_id" value="_parameter.getShard()" />
		<bind name="low" value="_parameter.getLow()" />
		<bind name="high" value="_parameter.getHigh()" />
		<![CDATA[
		create table if not exists ${schema_cm}.${tName_cm_master}_${shard_id}
		(
			check (id >= ${low}::bigint and id < ${high}::bigint)
		)
		inherits
			(${schema_cm}.${tName_cm_master});
		]]>
	</insert>
	<insert id="createClientShardInsertTriggerFun" parameterType="TgxSharder">
		<bind name="shard_size" value="_parameter.perTableSize()" />
		<![CDATA[
		create or replace function
			${schema_cm}."${tName_cm_master}_insert_trigger"()
				returns trigger as $body$
		declare shard_id bigint;
				sub_table text;
		begin
				select new.id / ${shard_size} into shard_id;
				sub_table:='${tName_cm_master}_'||shard_id;
				execute 'insert into ${schema_cm}.' || quote_ident(sub_table) || ' values (($1).*)' using new;
				execute 'insert into ${schema_cm}.${tName_cm_hash_global}(id,hash) values(($1).id,($1).client_id)' using new;
			return null;
		end;
			$body$
		language plpgsql;
		]]>
	</insert>
	<insert id="createClientShardInsertTrigger">
		<![CDATA[
		create trigger
			insert_${tName_cm_master}_trigger
		before insert on
			${schema_cm}.${tName_cm_master}
		for each row
		execute procedure
			${schema_cm}."${tName_cm_master}_insert_trigger"();
		]]>
	</insert>
	
	<select id="countClientShardSubTable" resultType="int">
		<![CDATA[
		select 
			count(*)
		from   
			pg_catalog.pg_class c
		join   
			pg_catalog.pg_namespace n on n.oid = c.relnamespace
		where  
			c.relkind = 'r'
		and    
			c.relname like '%${tName_cm_master}%'
		and    
			n.nspname = '${schema_cm}';
		]]>
	</select>
	<select id="countClientId" resultType="long">
		<![CDATA[
		select 
			last_value 
		from 
			${schema_cm}.${tName_cm_master}_id_seq
		]]>
	</select>
	<sql id="NoTagClientColumns">
		<![CDATA[
		id,
		client_id,
		extract(epoch from c_time) as "c_time",
		client_type,
		thirdparty_push_token
		]]> 	 
	</sql>
	<sql id="AllClientColumns">
		<![CDATA[
		id,
		client_id,
		extract(epoch from c_time) as "c_time",
		tags,
		client_type,
		thirdparty_push_token
		]]> 	 
	</sql>
	
	<select id="getClientByIndexNoTag" parameterType="long" resultType="TgxClient">
		select
			<include refid="NoTagClientColumns"/>
		from
			${schema_cm}.${tName_cm_master}
		where
			id = #{id}::bigint
	</select>
	
	<resultMap type="TgxClient" id="clientResultWithTag"> 
		<id column="id" property="id"/>
		<result column="client_id" property="client_id"/>
		<result column="c_time" property="c_time"/>
		<result column="client_type" property="client_type"/>
		<result column="thirdparty_push_token" property="thirdparty_push_token"/>
		<result column="tags" property="tags" typeHandler="org.apache.ibatis.type.ArrayTypeHandler" />
	</resultMap>
	
	<select id="getClientByIndex" parameterType="long" resultMap="clientResultWithTag" >
		select
			<include refid="AllClientColumns"/>
		from
			${schema_cm}.${tName_cm_master}
		where
			id = #{id}::bigint
	</select>
	
	<select id="getAllClients" parameterType="long" resultMap="clientResultWithTag">
		<bind name="limit" value="_parameter + 1024"/>
		select
			<include refid="AllClientColumns"/>
		from
			${schema_cm}.${tName_cm_master}
	 	<where>
	 		<if test="_parameter &gt; 0">
	 			<![CDATA[
	 			id >= ${_parameter}::bigint and id < ${limit}::bigint
	 			]]>
	 		</if>
	 		<if test="_parameter &lt;= 0">
	 			<![CDATA[ 
	 			id > 0::bigint and id <= 1024000000::bigint
	 			]]>
	 		</if>
	 	</where>
	</select>
	
	<select id="checkClientHash" parameterType="String" resultType="TgxClient">
		<![CDATA[
		select
			${schema_cm}.${tName_cm_hash_global}.id,
			${schema_cm}.${tName_cm_hash_global}.hash as "client_id"
		from
			${schema_cm}.${tName_cm_hash_global}
		where
			hash = #{hash}
		]]>
	</select>

	<insert id="insertClient" parameterType="TgxClient">
		<![CDATA[
		insert into
			${schema_cm}.${tName_cm_master}
			(client_id,
			thirdparty_push_token,
			client_type)
		values
			(#{client_id},
			#{thirdparty_push_token},
			#{client_type})
		]]>
		<selectKey  keyProperty="id" resultType="long" order="AFTER">
			<![CDATA[
			select currval('${schema_cm}.${tName_cm_master}_id_seq') 
			]]>
		</selectKey>
	</insert>
	<update id="updateClient" parameterType="TgxClient">
		<![CDATA[
		update 
			${schema_cm}.${tName_cm_master}
		]]>
		<set>
			tags=array
			<foreach collection="tags" item="item" index="index" open="[" close="]" separator=",">
				#{item}
			</foreach>
		</set>
		where
			id=#{id}::bigint
	</update>
</mapper>


  